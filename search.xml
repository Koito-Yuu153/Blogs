<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>111</title>
      <link href="/Koito-Yuu153/Blogs/2024/03/22/111/"/>
      <url>/Koito-Yuu153/Blogs/2024/03/22/111/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo的使用教程</title>
      <link href="/Koito-Yuu153/Blogs/2024/03/21/hexo-de-shi-yong-jiao-cheng/"/>
      <url>/Koito-Yuu153/Blogs/2024/03/21/hexo-de-shi-yong-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>本文的内容适用性可能会随着 hexo 和相关程序的更新而改变，请以实际的操作结果为准。</p><h2 id="什么是-Hexo？"><a href="#什么是-Hexo？" class="headerlink" title="什么是 Hexo？"></a>什么是 Hexo？</h2><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/">Markdown</a>（或其他标记语言）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><h2 id="Hexo-搭建"><a href="#Hexo-搭建" class="headerlink" title="Hexo 搭建"></a>Hexo 搭建</h2><h3 id="1-安装Git"><a href="#1-安装Git" class="headerlink" title="1. 安装Git"></a>1. 安装Git</h3><p>为了把本地的网页文件上传到github上面去，需要用到工具———Git[下载地址]。Git是目前世界上最先进的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。Git非常强大，建议每个人都去了解一下。廖雪峰老师的Git教程写的非常好，大家可以看一下。Git教程</p><p><strong>windows：</strong>到git官网上下载.exe文件，<a href="https://git-scm.com/download/win">Download git</a>，对于中国大陆地区用户，可以前往 <a href="https://npmmirror.com/mirrors/git-for-windows/">淘宝 Git for Windows 镜像</a> 下载 git 安装包。安装选项还是全部默认，只不过最后一步添加路径时选择 Use Git from the Windows Command Prompt ，这样我们就可以直接在命令提示符里打开git了。</p><p><strong>linux：</strong>对 <code>linux</code> 来说实在是太简单了，只需要一行代码</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git</span><br></pre></td></tr></tbody></table></figure><h3 id="2-安装nodejs"><a href="#2-安装nodejs" class="headerlink" title="2. 安装nodejs"></a>2. 安装nodejs</h3><p>Hexo是基于node.js编写的，所以需要安装一下node.js和里面的npm工具。</p><p><strong>windows：</strong>下载稳定版或者最新版都可以Node.js，安装选项全部默认，一路点击Next。<br>最后安装好之后，按Win+R打开命令提示符，输入node -v和npm -v，如果出现版本号，那么就安装成功了。</p><p><strong>linux：</strong>命令行安装：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install nodejs</span><br><span class="line">sudo apt-get install npm</span><br></pre></td></tr></tbody></table></figure><p>不过不推荐命令行安装，有时候有问题，建议直接到<a href="http://nodejs.cn/">nodejs官网</a>去下载，如下所示：</p><p><img src="/Blogs/./hexo%E7%9A%84%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/Nodejs_download.png"></p><p>安装完后，打开命令行终端，输入：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></tbody></table></figure><p>检查一下有没有安装成功，出现版本号就是成功了。</p><h3 id="3-安装Hexo"><a href="#3-安装Hexo" class="headerlink" title="3. 安装Hexo"></a>3. 安装Hexo</h3><p>前面<code>git</code>和<code>nodejs</code>安装好后，就可以使用 <code>npm</code> 安装<code>hexo</code>了。</p><blockquote><p>npm，全名 node package manger。</p><ul><li>npm 是<code>Node</code>的开放式模块登记和管理系统，是<code>Node.js</code>包的标准发布平台，用于<code>Node.js</code>包的发布、传播、依赖控制，网址：<a href="https://link.zhihu.com/?target=https://www.npmjs.com/">https://www.npmjs.com/</a></li><li>npm 提供了命令行工具，可以方便地下载、安装、升级、删除包，也可以让你作为开发者发布并维护包</li></ul><p><a href="https://zhuanlan.zhihu.com/p/258080852">npm 超详细教程</a></p><p><a href="https://www.runoob.com/nodejs/nodejs-npm.html">npm 使用介绍</a></p></blockquote><p>右键点击<code>Git Bash Here</code>，打开<code>git</code>的控制台窗口，以后我们所有的操作都在<code>git</code>控制台进行，就不用<code>Windows</code>自带的<code>cmd</code>了(要用也能用)。</p><p>输入<code>npm install -g hexo-cli</code>安装 <code>Hexo</code>。可能会有几个报错，无视它就行。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></tbody></table></figure><p>安装完后输入 <code>hexo -v</code> 验证是否安装成功。</p><p>至此 <code>hexo</code> 就安装完了。</p><blockquote><p>npm包在全局安装之后，这个包的命令就会被注册到全局，你就可以直接在命令行中执行这个命令了。其实当你全局安装一个npm包之后，这个包被存放在默认全局安装路径中，可通过命令 <code>npm root -g</code> 查看，<code>npm config ls</code> 查看 npm 的基础设置。通过 <code>npm install express -g</code> 进行全局安装，express 是包的名称。</p><p>本地(局部)安装会将安装包放在 ./node_modules 下（运行 npm 命令时所在的目录），如果没有 node_modules 目录，会在当前执行 npm 命令的目录下生成 node_modules 目录。通过 <code>npm install express</code> 进行局部安装，express 是包的名称。本地安装的包不能在命令行中直接运行包的命令，因为命令行通过环境变量检索可执行的命令，而本地安装的包的路径没有加到环境变量中，可以通过将 node_modules 路径添加到环境变量(不建议)，或者本地安装路径用路径来使用，如：<code>./node_modules/.bin/hexo g</code>  等效于全局安装时的 <code>hexo g</code> 命令，还可以使用 <code> npx hexo g</code> 。</p><p>上面的 hexo-cli 包就是全局安装，全局安装可以一个包多个项目共用，但不同的项目可能对包的版本要求各有不同，容易发生冲突，结合实际情况选择全局安装还是局部安装。</p></blockquote><h3 id="4-初始化-hexo"><a href="#4-初始化-hexo" class="headerlink" title="4. 初始化 hexo"></a>4. 初始化 hexo</h3><p>接下来初始化一下 <code>hexo</code> ，即初始化我们的网站，输入 <code>hexo init</code> 初始化文件夹</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init &lt;folder&gt;</span><br></pre></td></tr></tbody></table></figure><p><code>folder</code> 指定一个文件夹(若该文件夹不存在，则创建自动该文件夹)，在该文件夹下新建所需要的文件。如果没有指定这个参数，将直接在当前路径下新建所需文件。</p><p>接着进入新建了所需文件的路径，输入 <code>npm install</code> ，根据运行 <code>hexo init</code> 新建的文件中的配置安装必备的组件。</p><blockquote><p>注意：这里使用的下载命令是 <code>npm install</code> ，所以是局部安装，所以每次在其他路径初始化新的网站 (<code>hexo init</code>) 后，都要执行 <code>npm install</code> 下载一遍必备的组件。前面安装 hexo 是全局安装，所以不用重新安装 hexo。</p></blockquote><p>完成后，指定目录下有：</p><ul><li><code>node_modules:</code>  依赖包</li><li><code>public: </code> 存放生成的页面</li><li><code>scaffolds:</code> <a href="https://hexo.io/zh-cn/docs/writing#%E6%A8%A1%E7%89%88%EF%BC%88Scaffold%EF%BC%89">模版</a> 文件夹。新建文章时，Hexo 会根据 scaffold 来创建文件。</li></ul><blockquote><p>Hexo 的模板是指在新建的文章文件中默认填充的内容。例如，如果您修改 <code>scaffold/post.md</code> 中的 Front-matter 内容，那么每次新建一篇文章时都会包含这个修改。</p></blockquote><ul><li><code>source:</code> 用来存放用户的文章</li></ul><blockquote><p>资源文件夹是存放用户资源的地方。除 <code>_posts</code> 文件夹之外，开头命名为 <code>_</code> (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 <code>public</code> 文件夹，而其他文件会被拷贝过去。</p></blockquote><ul><li><code>themes:</code> <a href="https://hexo.io/zh-cn/docs/themes">主题</a> 文件夹。Hexo 会根据主题来生成静态页面。</li><li><code>_config.yml:</code>  网站的 <a href="https://hexo.io/zh-cn/docs/configuration">配置</a> 信息，您可以在此配置大部分的参数。</li><li><code>package.json:</code> 应用程序的信息。<a href="https://ejs.co/">EJS</a>, <a href="http://learnboost.github.io/stylus/">Stylus</a> 和 <a href="http://daringfireball.net/projects/markdown/">Markdown</a> 渲染引擎 已默认安装，可以自由移除</li></ul><p>这样本地的最简单的网站配置就弄好了，输入<code>hexo g</code> 生成静态网页，然后输入<code>hexo s</code> 打开本地服务器：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo server(或者简写:hexo s）)</span><br></pre></td></tr></tbody></table></figure><h2 id="配置-hexo-的-config-yml"><a href="#配置-hexo-的-config-yml" class="headerlink" title="配置  hexo 的 _config.yml"></a>配置  hexo 的 _config.yml</h2><p>官方的文档更详细—-&gt;<a href="https://hexo.io/zh-cn/docs/configuration">配置</a> ，强烈建议忘记相关内容时优先看官方文档，在这里只选出部分内容配合图片进行说明。</p><h3 id="网站"><a href="#网站" class="headerlink" title="网站"></a>网站</h3><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>title</code></td><td>网站标题</td></tr><tr><td><code>subtitle</code></td><td>网站副标题</td></tr><tr><td><code>description</code></td><td>网站描述</td></tr><tr><td><code>keywords</code></td><td>网站的关键词。支持多个关键词。</td></tr><tr><td><code>author</code></td><td>您的名字</td></tr><tr><td><code>language</code></td><td>网站使用的语言。对于简体中文用户来说，使用不同的主题可能需要设置成不同的值，请参考你的主题的文档自行设置，常见的有 <code>zh-Hans</code>和 <code>zh-CN</code>。</td></tr><tr><td><code>timezone</code></td><td>网站时区。Hexo 默认使用您电脑的时区。请参考 <a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones">时区列表</a> 进行设置，如 <code>America/New_York</code>, <code>Japan</code>, 和 <code>UTC</code> 。一般的，对于中国大陆地区可以使用 <code>Asia/Shanghai</code>。</td></tr></tbody></table><p>其中，<code>description</code> 主要用于SEO，告诉搜索引擎一个关于您站点的简单描述，通常建议在其中包含您网站的关键词。<code>author</code> 参数用于主题显示文章的作者(如果在文章的参数中指定了另一个author，这里的author就会被覆盖，未指定就显示这里的author)。</p><p><img src="/Blogs/_config.yml-Site.png"></p><p><img src="/Blogs/./hexo%E7%9A%84%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/_config.yml-Site.png"></p><p><img src="/Blogs/./hexo%E7%9A%84%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/_config.yml-Site_1.png"></p><h2 id="细碎的网页配置记录"><a href="#细碎的网页配置记录" class="headerlink" title="细碎的网页配置记录"></a>细碎的网页配置记录</h2><h3 id="首页轮播"><a href="#首页轮播" class="headerlink" title="首页轮播"></a>首页轮播</h3><p>首先想要看到轮播效果必须先把文章加入轮播里，首页图片和文章图片组成了轮播，如果不把文章加入轮播里就算开启了轮播也没有办法看到轮播效果。怎么加入readme文件中有文章Front-matter的介绍(建议ctrl+f搜索关键字)，也就是新建文章需要有哪些配置</p><h3 id="首页背景颜色"><a href="#首页背景颜色" class="headerlink" title="首页背景颜色"></a>首页背景颜色</h3><p>更改颜色主题文件夹下的source/css/matery.css的606-696行， 背景颜色可以要可以不要，看你选择的轮播图片了。如果轮播图片颜色较浅就要加，因为不加的话上面的文字会看不清楚，颜色也可以更改。不过没有找到好的配色的话还是不要乱改变了，会很丑</p><h3 id="导航栏背景颜色"><a href="#导航栏背景颜色" class="headerlink" title="导航栏背景颜色"></a>导航栏背景颜色</h3><p>也是matery.css中找到.bg-cover修改，我用的是</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.bg-color</span> {</span><br><span class="line"> <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(to right, <span class="number">#7371BC</span> <span class="number">0%</span>, <span class="number">#284D95</span> <span class="number">100%</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>改了你想用的颜色之后其他的图标、hover等等的颜色也要与导航栏相匹配才好看，怎么找其他的呢？告诉你一个比较笨又比较方便的一个办法。在matery.css中从头到尾找与刚才.bg-cover中相近的颜色(一般编辑器中都会显示颜色)全部改为你想要的颜色，轮播图片中按钮颜色找.cover-btns。具体配色看个人喜好了</p><h3 id="新建文章的模板修改"><a href="#新建文章的模板修改" class="headerlink" title="新建文章的模板修改"></a>新建文章的模板修改</h3><p>首先为了新建文章方便，我们可以修改一下文章模板，可以将<code>/scaffolds/post.md</code>修改为如下代码：</p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: {{ title }}</span><br><span class="line">date: {{ date }}</span><br><span class="line">author: </span><br><span class="line">img: </span><br><span class="line">coverImg: </span><br><span class="line">top: false</span><br><span class="line">cover: false</span><br><span class="line">toc: true</span><br><span class="line">mathjax: false</span><br><span class="line">password:</span><br><span class="line">summary:</span><br><span class="line">keywords:</span><br><span class="line">tags:</span><br><span class="line"><span class="section">categories:</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></tbody></table></figure><p>这样新建文章后 一些<code>Front-matter</code>参数不用你自己补充了，hexo会自动将这些内容复制到新建的博客中，修改对应信息就可以了。</p><h3 id="matery主题的背景图遮罩颜色"><a href="#matery主题的背景图遮罩颜色" class="headerlink" title="matery主题的背景图遮罩颜色"></a>matery主题的背景图遮罩颜色</h3><h3 id="在博客中使用本地图片"><a href="#在博客中使用本地图片" class="headerlink" title="在博客中使用本地图片"></a>在博客中使用本地图片</h3><p>对应官方文档的 <a href="https://hexo.io/zh-cn/docs/asset-folders">资源文件夹</a> 章节</p><p>想要更有规律地提供图片和其他资源以及想要将资源分布在各个文章上时，可以将 hexo 的 <code>config.yml</code> 文件中的 <code>post_asset_folder</code> 选项设为 <code>true</code> 。</p><p>这样的话 Hexo 将会在你每一次通过 <code>hexo new [layout] &lt;title&gt;</code> 命令创建新文章时自动创建一个文件夹。这个资源文件夹将会有与这个文章文件一样的名字。将所有与你的文章有关的资源放在这个关联文件夹中之后，你可以通过相对路径来引用它们，这样你就得到了一个更简单而且方便得多的工作流。</p><p><img src="/Blogs/hexo%E7%9A%84%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/image-20240322031826172.png" alt="新建文章"></p><p><img src="/Blogs/hexo%E7%9A%84%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/image-20240322032008441.png" alt="自动生成对应文件夹"></p><p>但是通过常规的 markdown 语法和相对路径来引用图片和其它资源在网页上并不能正常显示。</p><p><img src="/Blogs/hexo%E7%9A%84%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/image-20240322032521818.png" alt="图片不能正常显示"></p><h4 id="使用标签插件"><a href="#使用标签插件" class="headerlink" title="使用标签插件"></a>使用标签插件</h4><p>要想让 md 文件中引用的本地图片在网页上正常显示，可以使用 hexo 提供的功能。</p><p>以上面图片中新建的 111.md 为例，把一个 <code>example.jpg</code> 图片放在了对应 111 文件夹中，如果通过使用相对路径的常规 markdown 语法 <code>![](./111/example.jpg)</code> ，图片不会出现在网页上。要想在网页上正确显示图片，应该使用 hexo 插件提供的功能：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">{% asset_path slug %}</span><br><span class="line">{% asset_img slug [title] %}</span><br><span class="line">{% asset_link slug [title] %}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{% asset_img example.jpg This is an example image %}</span><br></pre></td></tr></tbody></table></figure><p>图片正常显示：</p><img src="hexo的使用教程/image-20240322040752173.png" alt="image-20240322040752173" style="zoom:50%;"><p>这种方法只能引用与文章同名的文件夹下的图片，上例中，如果在 111 文件夹下创建一个 222 文件夹，将图片放进去，想用  引用图片，这种操作是无效的。</p><p>通过这种方法引用的图片只能在构建成网页时显示，在 markdown 编辑器中只是一行代码而已，毕竟不是 markdown 语法的一部分，实际体验并不是很好。</p><h2 id="使用markdown语法"><a href="#使用markdown语法" class="headerlink" title="使用markdown语法"></a>使用markdown语法</h2><p>hexo-renderer-marked 允许你无需使用 <code>asset_img</code> 标签插件就可以在 markdown 中嵌入图片</p><h2 id="遇到过的问题"><a href="#遇到过的问题" class="headerlink" title="遇到过的问题"></a>遇到过的问题</h2><h3 id="部署-deploy-时遇到的问题"><a href="#部署-deploy-时遇到的问题" class="headerlink" title="部署(deploy)时遇到的问题"></a>部署(deploy)时遇到的问题</h3><p><img src="/Blogs/hexo%E7%9A%84%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/error1.png" alt="error1"></p><p><strong>解决方法：</strong></p><p><img src="/Blogs/hexo%E7%9A%84%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/error2.png" alt="error2"></p><p>图中提供的链接：<a href="https://docs.github.com/code-security/secret-scanning/pushing-a-branch-blocked-by-push-protection">Learn how to resolve a blocked push</a></p><p>看了一下大概是为了保证仓库安全而采取的措施，应该是使用了这里使用的是 Windows PowerShell 命令行，在 git 自带的 Bash Shell 提交应该不会出现这种问题，最好使用 git 自带的 Bash Shell 来操作。</p><p>1</p><img src="/Blogs/2024/03/21/hexo-de-shi-yong-jiao-cheng/error2.png" class="" title="这是一张图片"><p>2</p><p>3</p><p><img src="/Blogs/2024/03/21/hexo-de-shi-yong-jiao-cheng/error2.png" alt="这是一张图片"></p><p>4</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://hexo.io/zh-cn/docs/">hexo 官方中文文档</a></p><p><a href="http://t.csdnimg.cn/rHnFJ">Hexo+Github博客搭建教程</a></p><p><a href="http://t.csdnimg.cn/oxyDa">Hexo-Matery主题细致美化</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
